package com.aahar.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.aahar.daos.DishDao;
import com.aahar.daos.MenuItemDao;
import com.aahar.daos.MessDao;
import com.aahar.daos.WeeklyMenuDao;
import com.aahar.daos.WeeklyMenuItemsDao;
import com.aahar.dtos.MenuItemRespDTO;
import com.aahar.pojos.Dish;
import com.aahar.pojos.MenuItem;
import com.aahar.pojos.Mess;
import com.aahar.pojos.WeeklyMenu;
import com.aahar.pojos.WeeklyMenu.DayOfWeek;
import com.aahar.pojos.WeeklyMenuItem;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@Transactional
@RequiredArgsConstructor
public class MenuServiceImpl implements MenuService{
	@Autowired
    private  MenuItemDao menuItemDao;
	
	@Autowired
    private  MessDao messDao;
	
	@Autowired
    private  WeeklyMenuDao weeklyMenuDao;
	
	@Autowired
    private  WeeklyMenuItemsDao weeklyMenuItemsDao;
	
	@Autowired
	private DishDao dishDao;

    public List<MenuItemRespDTO> getWeeklyMenu(Long messOwnerId) {
        // Get the mess for the given messOwnerId
        Mess mess = messDao.findByMessOwnerId(messOwnerId)
                .orElseThrow(() -> new RuntimeException("Mess not found for owner"));

        // Fetch all WeeklyMenus for the given Mess
        List<WeeklyMenu> weeklyMenus = weeklyMenuDao.findByMessId(mess.getId());

        // Now, for each WeeklyMenu, fetch the corresponding WeeklyMenuItems
        List<MenuItemRespDTO> responses = new ArrayList<>();

        for (WeeklyMenu weeklyMenu : weeklyMenus) {
            List<WeeklyMenuItem> weeklyMenuItems = weeklyMenuItemsDao.findByWeeklyMenu(weeklyMenu);
            for (WeeklyMenuItem weeklyMenuItem : weeklyMenuItems) {
                responses.add(mapToMenuItemResponse(weeklyMenuItem));
            }
        }

        return responses;
    }

    // Map WeeklyMenuItems to MenuItemResponse
    private MenuItemRespDTO mapToMenuItemResponse(WeeklyMenuItem weeklyMenuItem) {
        MenuItem item = weeklyMenuItem.getMenuItem();

        return new MenuItemRespDTO(
                item.getId(),
                weeklyMenuItem.getWeeklyMenu().getWeekday() .name(),
                item.getDish().getName(),
                item.getPrice(),
                item.getIsAvailable()
        );
    }
    
    
    
 	@Override
 	public MenuItemRespDTO addMenuItem(Long messOwnerId, String dishName, double price, DayOfWeek dayOfWeek, String mealType) {
 	    // Find the mess associated with the messOwnerId
 	    Mess mess = messDao.findByMessOwnerId(messOwnerId)
 	            .orElseThrow(() -> new RuntimeException("Mess not found for owner"));

 	    // Validate and convert dayOfWeek
 	    WeeklyMenu.DayOfWeek weekdayEnum;
 	    try {
 	        weekdayEnum = WeeklyMenu.DayOfWeek.valueOf(dayOfWeek.toUpperCase());
 	    } catch (IllegalArgumentException e) {
 	        throw new RuntimeException("Invalid day of the week provided: " + dayOfWeek);
 	    }

 	    // Validate and convert mealType
 	    MenuItem.MealType mealTypeEnum;
 	    try {
 	        mealTypeEnum = MenuItem.MealType.valueOf(mealType.toUpperCase());
 	    } catch (IllegalArgumentException e) {
 	        throw new RuntimeException("Invalid meal type provided: " + mealType);
 	    }

 	    // Find or create a WeeklyMenu for the given mess and day
 	    WeeklyMenu weeklyMenu = weeklyMenuDao.findByMessIdAndWeekday(mess.getId(), weekdayEnum.name())
 	            .orElseGet(() -> {
 	                WeeklyMenu newMenu = new WeeklyMenu();
 	                newMenu.setMess(mess);
 	                newMenu.setWeekday(weekdayEnum);
 	                return weeklyMenuDao.save(newMenu);
 	            });

 	    // Fetch the Dish entity
 	    Dish dish = dishDao.findByName(dishName)
 	            .orElseThrow(() -> new RuntimeException("Dish not found"));

 	    // Create a new MenuItem
 	    MenuItem menuItem = new MenuItem();
 	    menuItem.setDish(dish);
 	    menuItem.setMess(mess);
 	    menuItem.setPrice(price);
 	    menuItem.setMealType(mealTypeEnum);  // âœ… Set meal type here
 	    menuItem.setIsAvailable(true);
 	    menuItem = menuItemDao.save(menuItem);

 	    // Link the MenuItem with WeeklyMenu
 	    WeeklyMenuItem weeklyMenuItem = new WeeklyMenuItem();
 	    weeklyMenuItem.setWeeklyMenu(weeklyMenu);
 	    weeklyMenuItem.setMenuItem(menuItem);
 	    weeklyMenuItemsDao.save(weeklyMenuItem);

 	    return new MenuItemRespDTO(
 	            menuItem.getId(),
 	            weekdayEnum.name(),
 	            menuItem.getDish().getName(),
 	            menuItem.getPrice(),
 	            menuItem.getIsAvailable()
 	    );
 	}


}
