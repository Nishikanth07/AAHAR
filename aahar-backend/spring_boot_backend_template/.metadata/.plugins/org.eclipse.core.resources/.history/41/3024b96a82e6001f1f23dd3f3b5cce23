
package com.aahar.service;

import com.aahar.daos.OrderDao;
import com.aahar.dtos.OrderResponseDTO;
import com.aahar.dtos.OrderItemDTO;
import com.aahar.pojos.Order;
import com.aahar.pojos.OrderItem;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class OrderServiceImpl implements OrderService {

    @Autowired
    private OrderDao orderDao;

    @Autowired
    private ModelMapper modelMapper;

    @Override
    public List<OrderResponseDTO> getAllOrdersForMessOwner(Long messOwnerId) {
        List<Order> orders = orderDao.findAllOrdersByMessOwnerId(messOwnerId);

        return orders.stream().map(order -> {
            OrderResponseDTO dto = modelMapper.map(order, OrderResponseDTO.class);

            // ✅ Ensuring unique order mapping
            dto.setOrderId(order.getId());
            dto.setUserId(order.getUser().getId());
            dto.setUsername(order.getUser().getUsername());
            dto.setOrderStatus(order.getOrderStatus().name());
            dto.setOrderPlacedAt(order.getOrderPlacedAt());

            // ✅ Collecting order items into a list for the order
            dto.setOrderItems(order.getOrderItems().stream().map(item -> {
                OrderItemDTO itemDTO = new OrderItemDTO();
                itemDTO.setMenuItemId(item.getMenuItem().getId());
                itemDTO.setDishName(item.getMenuItem().getDish().getName());
                itemDTO.setQuantity(item.getQuantity());
                return itemDTO;
            }).collect(Collectors.toList()));

            return dto;
        }).collect(Collectors.toList());
    }

    @Override
    public List<OrderResponseDTO> getRecentOrdersForMessOwner(Long messOwnerId) {
        LocalDateTime sevenDaysAgo = LocalDateTime.now().minusDays(7);

        List<Order> orders = orderDao.findRecentOrdersByMessOwner(messOwnerId, sevenDaysAgo);

        return orders.stream()
                .map(order -> modelMapper.map(order, OrderResponseDTO.class))
                .collect(Collectors.toList());
    }
}
}
